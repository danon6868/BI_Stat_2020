library(ggplot2)
library(dplyr)
library(car)
library(ggplot2)
library(dplyr)
library(car)
install.packages(car)
install.packages('car')
library(ggplot2)
library(dplyr)
library(car)
library(ggplot2)
library(dplyr)
library('car')
install.packages(car)
install.packages('car')
install.packages('car', dependencies = T)
library(car)
library('car')
library('car')
library('car')
install.packages("car", dependencies=TRUE, repos='http://cran.rstudio.com/')
library('car')
library('rio')
install.packages('rio', dependencies = T)
install.packages('xml2', dependencies = T)
library('xml2')
install.packages('minqa', dependencies = T)
library('minqa')
install.packages('cat', dependencies = T)
install.packages('car', dependencies = T)
install.packages("libcurl", dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('car', dependencies = T)
install.packages("~/bioinf_institute/statistics/pachages/curl-7.55.0.tar.gz", repos = NULL, type = "source")
.libPaths()
install.packages("tidyverse")
install.packages('car', dependencies = T)
library('car')
library(ggplot2)
library(dplyr)
library(car)
library(Hmisc)
library(multcomp)
library(gridExtra)
theme_set(theme_bw())
amoeba <- read.csv("../../Data/amoeba.csv")
amoeba$Condition <- factor(amoeba$Condition, labels = c("None", "Heat_70C", "10%_formalin", "Heat+formalin", "Formalin+heat"))
str(amoeba)
View(amoeba)
View(amoeba)
table(amoeba$Condition)
ggplot(amoeba, aes(Condition, Yield, color = Condition)) + stat_summary(fun.data = "mean_cl_normal") + ggtitle(label = "График зависимости числа эксцистирований \nот условий обработки (исходные данные)")
mod_amoeba <- lm(Yield ~ Condition, data = amoeba)
summary(mod_amoeba)
#theme_set(theme_bw())
#Общая изменчивость
total<-ggplot(amoeba, aes(x = Condition, y = Yield))+ geom_linerange(aes(x=Condition, ymax=Yield, ymin = mean(amoeba$Yield)), size = 1,color = "grey",position = position_jitter(width = 0.1, seed = 1L))+
geom_hline(yintercept = mean(amoeba$Yield))+
geom_point(position = position_jitter(width = 0.1, seed = 1L)) +ggtitle("Общая \n изменчивость")+theme(axis.text.x = element_text(angle = 45, hjust = 1))
gr_mean<-amoeba %>% group_by(Condition) %>% summarise(mean = mean(Yield))
two_pic<-right_join(x = amoeba, y = gr_mean)
hline <- data.frame(Condition=levels(amoeba$Condition), v=gr_mean$mean)
resid<-ggplot(two_pic, aes(x = Condition, y = Yield)) + geom_linerange(aes(x=Condition, ymax=Yield, ymin = mean), size = 1,color = "green", position = position_jitter(width = 0.1, seed = 1L)) +geom_point(position = position_jitter(width = 0.1, seed = 1L)) +geom_point(data=hline, aes(Condition, v), shape=95, size=15) +ggtitle("Случайная \n изменчивость")+theme(axis.text.x = element_text(angle = 45, hjust = 1))
factor <- ggplot() +  geom_linerange(data = gr_mean, aes(x= Condition, ymax = mean, ymin = mean(amoeba$Yield)), color = "blue", size = 2)+geom_point(data = two_pic, aes(x = Condition, y = Yield), position = position_jitter(width = 0.1, seed = 1L)) +geom_point(data=hline, aes(Condition, v), shape=95, size=15) +geom_hline(yintercept = mean(amoeba$Yield)) + ggtitle("Факторная \n изменчивость")+theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(total, factor, resid, nrow = 1)
amoeba_anova <- Anova(mod_amoeba)
amoeba_anova
mod_diag <- fortify(mod_amoeba)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag), y = .cooksd)) + geom_bar(stat = "identity") + ggtitle("График расстояний Кука")
ggplot(mod_diag, aes(x = Condition, y = .stdresid)) + geom_boxplot() + ggtitle("График остатков")
qqPlot(mod_amoeba, id = FALSE, main = "Квантильный график остаков")
post_hoch <- glht(mod_amoeba, linfct = mcp(Condition = "Tukey"))
result<-summary(post_hoch)
result
MyData <- data.frame(Condition = factor(levels(amoeba$Cond), levels = levels(amoeba$Condition)))
MyData <- data.frame(MyData,
predict(mod_amoeba, newdata = MyData, interval = "confidence")
)
gg_bars <- ggplot(data = MyData, aes(x = Condition, y = fit)) +
geom_bar(stat = "identity", aes(fill = Condition), width = 0.5) +
geom_errorbar(aes(ymin = lwr, ymax = upr), width = 0.1)
gg_bars + ggtitle(label = "График зависимости числа эксцистирований \nот условий обработки (пост-хок тест)") + geom_text(aes(y = 1.6, label = c("*", "*", "*", "", "*"))) + ylab(label = "Yield")
knitr::opts_chunk$set(echo = TRUE)
library(psych)
library(car)
library(ggplot2)
library(dplyr)
library(gridExtra)
theme_set(theme_bw())
rock <- read.csv("../../Data/rockstrength.csv")
rock <- rock[-15,]
str(rock) #все ли нормально открылось
plot(rock) #скатерплот чтобы посмотреть структуру данных
ggplot(rock, aes(UCS, gs)) +
geom_point() +
geom_smooth(method = "lm") #взаимосвязь прочности и размера частиц
cor.test(rock$UCS, rock$gs)
mod <- lm(UCS ~ gs, rock) #модель зависимости прочности от размера частиц
summary(mod)
ggplot(mod_diag, aes(x = 1:nrow(mod_diag), y = .cooksd)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = 2, color = "red")
gg_resid <- ggplot(data = mod_diag, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0)+
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red")
gg_resid
qqPlot(mod_diag$.fitted)
rock_predicted <- predict(mod, interval = "prediction")
rock_conf <- as.data.frame(predict(mod, interval = "confidence"))
rock_predicted <- data.frame(rock, rock_predicted)
head(rock_predicted)
#График предсказаний модели с доверительными интервалами к линии регресии и к собственно предсказаниям
ggplot(rock_predicted, aes(gs, fit)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = lwr, ymax = upr, x = gs), alpha = 0.2, fill = "green") +
geom_point(aes(y = UCS)) +
geom_ribbon(data = rock_conf, aes(ymin = lwr, ymax = upr, x = rock_predicted$gs), alpha = 0.2) +
xlim(0.005, 0.067) +
annotate("text", x = 0.01, y = 100, label = "Extrapolation") +
annotate("text", x = 0.063, y = 100, label = "Extrapolation") +
annotate("text", x = 0.03, y = 83, label = "Interpolation") +
geom_vline(xintercept = 0.017, linetype = "dashed") +
geom_vline(xintercept = 0.056, linetype = "dashed")
system('ls')
system('cd projects')
system('ls')
setwd('projects/project_anova/')
getwd()
data_join <- function(directory, extension){
setwd(directory)
df <- data.frame()
for (file in list.files()){
if (endsWith(file, suffix = extension)){
data <- read.csv(file)
df <- rbind(df, data)
}
}
1
data_join <- function(directory, extension){
setwd(directory)
df <- data.frame()
for (file in list.files()){
if (endsWith(file, suffix = extension)){
data <- read.csv(file)
df <- rbind(df, data)
}
}
return(df)
}
2
getwd()
data_join <- function(directory){
setwd(directory)
df <- data.frame()
for (file in list.files()){
if (endsWith(file, suffix = '.csv')){
data <- read.csv(file)
df <- rbind(df, data)
}
}
return(df)
}
